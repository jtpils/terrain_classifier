# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from centauro_locomotion_msgs/LegMovementActionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import centauro_locomotion_msgs.msg
import genpy
import actionlib_msgs.msg
import std_msgs.msg

class LegMovementActionGoal(genpy.Message):
  _md5sum = "cff8385e4f7904d69748964d6a60cde0"
  _type = "centauro_locomotion_msgs/LegMovementActionGoal"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
LegMovementGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: centauro_locomotion_msgs/LegMovementGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# ROS Action which defines endeffector positions for all four legs in cartesian space
# relative to the robot base center. (fl = front left, br = back right ...). Each wheel is oriented forward and is perpendicular
# to the ground. The bool flag "wheel_rotation_enabled" describes if the wheel is free to rotate or if wheel rotation is inhibited.
# The result is an empty message but has to be sent to signalize that the desired configuration is reached.

# Goal: longitudinal wheel coordinate
float32 goal_pos_fl_x
float32 goal_pos_fl_y
float32 goal_pos_fl_z
bool wheel_rotation_enabled_fl

float32 goal_pos_bl_x
float32 goal_pos_bl_y
float32 goal_pos_bl_z
bool wheel_rotation_enabled_bl

float32 goal_pos_br_x
float32 goal_pos_br_y
float32 goal_pos_br_z
bool wheel_rotation_enabled_br

float32 goal_pos_fr_x
float32 goal_pos_fr_y
float32 goal_pos_fr_z
bool wheel_rotation_enabled_fr

"""
  __slots__ = ['header','goal_id','goal']
  _slot_types = ['std_msgs/Header','actionlib_msgs/GoalID','centauro_locomotion_msgs/LegMovementGoal']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal_id,goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LegMovementActionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = centauro_locomotion_msgs.msg.LegMovementGoal()
    else:
      self.header = std_msgs.msg.Header()
      self.goal_id = actionlib_msgs.msg.GoalID()
      self.goal = centauro_locomotion_msgs.msg.LegMovementGoal()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3fB3fB3fB3fB.pack(_x.goal.goal_pos_fl_x, _x.goal.goal_pos_fl_y, _x.goal.goal_pos_fl_z, _x.goal.wheel_rotation_enabled_fl, _x.goal.goal_pos_bl_x, _x.goal.goal_pos_bl_y, _x.goal.goal_pos_bl_z, _x.goal.wheel_rotation_enabled_bl, _x.goal.goal_pos_br_x, _x.goal.goal_pos_br_y, _x.goal.goal_pos_br_z, _x.goal.wheel_rotation_enabled_br, _x.goal.goal_pos_fr_x, _x.goal.goal_pos_fr_y, _x.goal.goal_pos_fr_z, _x.goal.wheel_rotation_enabled_fr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = centauro_locomotion_msgs.msg.LegMovementGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.goal.goal_pos_fl_x, _x.goal.goal_pos_fl_y, _x.goal.goal_pos_fl_z, _x.goal.wheel_rotation_enabled_fl, _x.goal.goal_pos_bl_x, _x.goal.goal_pos_bl_y, _x.goal.goal_pos_bl_z, _x.goal.wheel_rotation_enabled_bl, _x.goal.goal_pos_br_x, _x.goal.goal_pos_br_y, _x.goal.goal_pos_br_z, _x.goal.wheel_rotation_enabled_br, _x.goal.goal_pos_fr_x, _x.goal.goal_pos_fr_y, _x.goal.goal_pos_fr_z, _x.goal.wheel_rotation_enabled_fr,) = _struct_3fB3fB3fB3fB.unpack(str[start:end])
      self.goal.wheel_rotation_enabled_fl = bool(self.goal.wheel_rotation_enabled_fl)
      self.goal.wheel_rotation_enabled_bl = bool(self.goal.wheel_rotation_enabled_bl)
      self.goal.wheel_rotation_enabled_br = bool(self.goal.wheel_rotation_enabled_br)
      self.goal.wheel_rotation_enabled_fr = bool(self.goal.wheel_rotation_enabled_fr)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3fB3fB3fB3fB.pack(_x.goal.goal_pos_fl_x, _x.goal.goal_pos_fl_y, _x.goal.goal_pos_fl_z, _x.goal.wheel_rotation_enabled_fl, _x.goal.goal_pos_bl_x, _x.goal.goal_pos_bl_y, _x.goal.goal_pos_bl_z, _x.goal.wheel_rotation_enabled_bl, _x.goal.goal_pos_br_x, _x.goal.goal_pos_br_y, _x.goal.goal_pos_br_z, _x.goal.wheel_rotation_enabled_br, _x.goal.goal_pos_fr_x, _x.goal.goal_pos_fr_y, _x.goal.goal_pos_fr_z, _x.goal.wheel_rotation_enabled_fr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = centauro_locomotion_msgs.msg.LegMovementGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 52
      (_x.goal.goal_pos_fl_x, _x.goal.goal_pos_fl_y, _x.goal.goal_pos_fl_z, _x.goal.wheel_rotation_enabled_fl, _x.goal.goal_pos_bl_x, _x.goal.goal_pos_bl_y, _x.goal.goal_pos_bl_z, _x.goal.wheel_rotation_enabled_bl, _x.goal.goal_pos_br_x, _x.goal.goal_pos_br_y, _x.goal.goal_pos_br_z, _x.goal.wheel_rotation_enabled_br, _x.goal.goal_pos_fr_x, _x.goal.goal_pos_fr_y, _x.goal.goal_pos_fr_z, _x.goal.wheel_rotation_enabled_fr,) = _struct_3fB3fB3fB3fB.unpack(str[start:end])
      self.goal.wheel_rotation_enabled_fl = bool(self.goal.wheel_rotation_enabled_fl)
      self.goal.wheel_rotation_enabled_bl = bool(self.goal.wheel_rotation_enabled_bl)
      self.goal.wheel_rotation_enabled_br = bool(self.goal.wheel_rotation_enabled_br)
      self.goal.wheel_rotation_enabled_fr = bool(self.goal.wheel_rotation_enabled_fr)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3fB3fB3fB3fB = struct.Struct("<3fB3fB3fB3fB")
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
