# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from centauro_locomotion_msgs/LegMovementGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LegMovementGoal(genpy.Message):
  _md5sum = "3ca7b1bbc5861ddc981466bbe2d8e8d0"
  _type = "centauro_locomotion_msgs/LegMovementGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# ROS Action which defines endeffector positions for all four legs in cartesian space
# relative to the robot base center. (fl = front left, br = back right ...). Each wheel is oriented forward and is perpendicular
# to the ground. The bool flag "wheel_rotation_enabled" describes if the wheel is free to rotate or if wheel rotation is inhibited.
# The result is an empty message but has to be sent to signalize that the desired configuration is reached.

# Goal: longitudinal wheel coordinate
float32 goal_pos_fl_x
float32 goal_pos_fl_y
float32 goal_pos_fl_z
bool wheel_rotation_enabled_fl

float32 goal_pos_bl_x
float32 goal_pos_bl_y
float32 goal_pos_bl_z
bool wheel_rotation_enabled_bl

float32 goal_pos_br_x
float32 goal_pos_br_y
float32 goal_pos_br_z
bool wheel_rotation_enabled_br

float32 goal_pos_fr_x
float32 goal_pos_fr_y
float32 goal_pos_fr_z
bool wheel_rotation_enabled_fr

"""
  __slots__ = ['goal_pos_fl_x','goal_pos_fl_y','goal_pos_fl_z','wheel_rotation_enabled_fl','goal_pos_bl_x','goal_pos_bl_y','goal_pos_bl_z','wheel_rotation_enabled_bl','goal_pos_br_x','goal_pos_br_y','goal_pos_br_z','wheel_rotation_enabled_br','goal_pos_fr_x','goal_pos_fr_y','goal_pos_fr_z','wheel_rotation_enabled_fr']
  _slot_types = ['float32','float32','float32','bool','float32','float32','float32','bool','float32','float32','float32','bool','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       goal_pos_fl_x,goal_pos_fl_y,goal_pos_fl_z,wheel_rotation_enabled_fl,goal_pos_bl_x,goal_pos_bl_y,goal_pos_bl_z,wheel_rotation_enabled_bl,goal_pos_br_x,goal_pos_br_y,goal_pos_br_z,wheel_rotation_enabled_br,goal_pos_fr_x,goal_pos_fr_y,goal_pos_fr_z,wheel_rotation_enabled_fr

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LegMovementGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.goal_pos_fl_x is None:
        self.goal_pos_fl_x = 0.
      if self.goal_pos_fl_y is None:
        self.goal_pos_fl_y = 0.
      if self.goal_pos_fl_z is None:
        self.goal_pos_fl_z = 0.
      if self.wheel_rotation_enabled_fl is None:
        self.wheel_rotation_enabled_fl = False
      if self.goal_pos_bl_x is None:
        self.goal_pos_bl_x = 0.
      if self.goal_pos_bl_y is None:
        self.goal_pos_bl_y = 0.
      if self.goal_pos_bl_z is None:
        self.goal_pos_bl_z = 0.
      if self.wheel_rotation_enabled_bl is None:
        self.wheel_rotation_enabled_bl = False
      if self.goal_pos_br_x is None:
        self.goal_pos_br_x = 0.
      if self.goal_pos_br_y is None:
        self.goal_pos_br_y = 0.
      if self.goal_pos_br_z is None:
        self.goal_pos_br_z = 0.
      if self.wheel_rotation_enabled_br is None:
        self.wheel_rotation_enabled_br = False
      if self.goal_pos_fr_x is None:
        self.goal_pos_fr_x = 0.
      if self.goal_pos_fr_y is None:
        self.goal_pos_fr_y = 0.
      if self.goal_pos_fr_z is None:
        self.goal_pos_fr_z = 0.
      if self.wheel_rotation_enabled_fr is None:
        self.wheel_rotation_enabled_fr = False
    else:
      self.goal_pos_fl_x = 0.
      self.goal_pos_fl_y = 0.
      self.goal_pos_fl_z = 0.
      self.wheel_rotation_enabled_fl = False
      self.goal_pos_bl_x = 0.
      self.goal_pos_bl_y = 0.
      self.goal_pos_bl_z = 0.
      self.wheel_rotation_enabled_bl = False
      self.goal_pos_br_x = 0.
      self.goal_pos_br_y = 0.
      self.goal_pos_br_z = 0.
      self.wheel_rotation_enabled_br = False
      self.goal_pos_fr_x = 0.
      self.goal_pos_fr_y = 0.
      self.goal_pos_fr_z = 0.
      self.wheel_rotation_enabled_fr = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3fB3fB3fB3fB.pack(_x.goal_pos_fl_x, _x.goal_pos_fl_y, _x.goal_pos_fl_z, _x.wheel_rotation_enabled_fl, _x.goal_pos_bl_x, _x.goal_pos_bl_y, _x.goal_pos_bl_z, _x.wheel_rotation_enabled_bl, _x.goal_pos_br_x, _x.goal_pos_br_y, _x.goal_pos_br_z, _x.wheel_rotation_enabled_br, _x.goal_pos_fr_x, _x.goal_pos_fr_y, _x.goal_pos_fr_z, _x.wheel_rotation_enabled_fr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.goal_pos_fl_x, _x.goal_pos_fl_y, _x.goal_pos_fl_z, _x.wheel_rotation_enabled_fl, _x.goal_pos_bl_x, _x.goal_pos_bl_y, _x.goal_pos_bl_z, _x.wheel_rotation_enabled_bl, _x.goal_pos_br_x, _x.goal_pos_br_y, _x.goal_pos_br_z, _x.wheel_rotation_enabled_br, _x.goal_pos_fr_x, _x.goal_pos_fr_y, _x.goal_pos_fr_z, _x.wheel_rotation_enabled_fr,) = _struct_3fB3fB3fB3fB.unpack(str[start:end])
      self.wheel_rotation_enabled_fl = bool(self.wheel_rotation_enabled_fl)
      self.wheel_rotation_enabled_bl = bool(self.wheel_rotation_enabled_bl)
      self.wheel_rotation_enabled_br = bool(self.wheel_rotation_enabled_br)
      self.wheel_rotation_enabled_fr = bool(self.wheel_rotation_enabled_fr)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3fB3fB3fB3fB.pack(_x.goal_pos_fl_x, _x.goal_pos_fl_y, _x.goal_pos_fl_z, _x.wheel_rotation_enabled_fl, _x.goal_pos_bl_x, _x.goal_pos_bl_y, _x.goal_pos_bl_z, _x.wheel_rotation_enabled_bl, _x.goal_pos_br_x, _x.goal_pos_br_y, _x.goal_pos_br_z, _x.wheel_rotation_enabled_br, _x.goal_pos_fr_x, _x.goal_pos_fr_y, _x.goal_pos_fr_z, _x.wheel_rotation_enabled_fr))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.goal_pos_fl_x, _x.goal_pos_fl_y, _x.goal_pos_fl_z, _x.wheel_rotation_enabled_fl, _x.goal_pos_bl_x, _x.goal_pos_bl_y, _x.goal_pos_bl_z, _x.wheel_rotation_enabled_bl, _x.goal_pos_br_x, _x.goal_pos_br_y, _x.goal_pos_br_z, _x.wheel_rotation_enabled_br, _x.goal_pos_fr_x, _x.goal_pos_fr_y, _x.goal_pos_fr_z, _x.wheel_rotation_enabled_fr,) = _struct_3fB3fB3fB3fB.unpack(str[start:end])
      self.wheel_rotation_enabled_fl = bool(self.wheel_rotation_enabled_fl)
      self.wheel_rotation_enabled_bl = bool(self.wheel_rotation_enabled_bl)
      self.wheel_rotation_enabled_br = bool(self.wheel_rotation_enabled_br)
      self.wheel_rotation_enabled_fr = bool(self.wheel_rotation_enabled_fr)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3fB3fB3fB3fB = struct.Struct("<3fB3fB3fB3fB")
