// Generated by gencpp from file ros_websocket_bridge/DetectStairsResponse.msg
// DO NOT EDIT!


#ifndef ROS_WEBSOCKET_BRIDGE_MESSAGE_DETECTSTAIRSRESPONSE_H
#define ROS_WEBSOCKET_BRIDGE_MESSAGE_DETECTSTAIRSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_websocket_bridge
{
template <class ContainerAllocator>
struct DetectStairsResponse_
{
  typedef DetectStairsResponse_<ContainerAllocator> Type;

  DetectStairsResponse_()
    : probability_map()
    , height(0)
    , width(0)  {
    }
  DetectStairsResponse_(const ContainerAllocator& _alloc)
    : probability_map(_alloc)
    , height(0)
    , width(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _probability_map_type;
  _probability_map_type probability_map;

   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _width_type;
  _width_type width;




  typedef boost::shared_ptr< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DetectStairsResponse_

typedef ::ros_websocket_bridge::DetectStairsResponse_<std::allocator<void> > DetectStairsResponse;

typedef boost::shared_ptr< ::ros_websocket_bridge::DetectStairsResponse > DetectStairsResponsePtr;
typedef boost::shared_ptr< ::ros_websocket_bridge::DetectStairsResponse const> DetectStairsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_websocket_bridge

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d61a7cee5186f18481757a20005ec79d";
  }

  static const char* value(const ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd61a7cee5186f184ULL;
  static const uint64_t static_value2 = 0x81757a20005ec79dULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_websocket_bridge/DetectStairsResponse";
  }

  static const char* value(const ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] probability_map\n\
int32 height\n\
int32 width\n\
\n\
";
  }

  static const char* value(const ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.probability_map);
      stream.next(m.height);
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectStairsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_websocket_bridge::DetectStairsResponse_<ContainerAllocator>& v)
  {
    s << indent << "probability_map[]" << std::endl;
    for (size_t i = 0; i < v.probability_map.size(); ++i)
    {
      s << indent << "  probability_map[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.probability_map[i]);
    }
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_WEBSOCKET_BRIDGE_MESSAGE_DETECTSTAIRSRESPONSE_H
