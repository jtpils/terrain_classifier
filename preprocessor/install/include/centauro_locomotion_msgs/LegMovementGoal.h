// Generated by gencpp from file centauro_locomotion_msgs/LegMovementGoal.msg
// DO NOT EDIT!


#ifndef CENTAURO_LOCOMOTION_MSGS_MESSAGE_LEGMOVEMENTGOAL_H
#define CENTAURO_LOCOMOTION_MSGS_MESSAGE_LEGMOVEMENTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace centauro_locomotion_msgs
{
template <class ContainerAllocator>
struct LegMovementGoal_
{
  typedef LegMovementGoal_<ContainerAllocator> Type;

  LegMovementGoal_()
    : goal_pos_fl_x(0.0)
    , goal_pos_fl_y(0.0)
    , goal_pos_fl_z(0.0)
    , wheel_rotation_enabled_fl(false)
    , goal_pos_bl_x(0.0)
    , goal_pos_bl_y(0.0)
    , goal_pos_bl_z(0.0)
    , wheel_rotation_enabled_bl(false)
    , goal_pos_br_x(0.0)
    , goal_pos_br_y(0.0)
    , goal_pos_br_z(0.0)
    , wheel_rotation_enabled_br(false)
    , goal_pos_fr_x(0.0)
    , goal_pos_fr_y(0.0)
    , goal_pos_fr_z(0.0)
    , wheel_rotation_enabled_fr(false)  {
    }
  LegMovementGoal_(const ContainerAllocator& _alloc)
    : goal_pos_fl_x(0.0)
    , goal_pos_fl_y(0.0)
    , goal_pos_fl_z(0.0)
    , wheel_rotation_enabled_fl(false)
    , goal_pos_bl_x(0.0)
    , goal_pos_bl_y(0.0)
    , goal_pos_bl_z(0.0)
    , wheel_rotation_enabled_bl(false)
    , goal_pos_br_x(0.0)
    , goal_pos_br_y(0.0)
    , goal_pos_br_z(0.0)
    , wheel_rotation_enabled_br(false)
    , goal_pos_fr_x(0.0)
    , goal_pos_fr_y(0.0)
    , goal_pos_fr_z(0.0)
    , wheel_rotation_enabled_fr(false)  {
  (void)_alloc;
    }



   typedef float _goal_pos_fl_x_type;
  _goal_pos_fl_x_type goal_pos_fl_x;

   typedef float _goal_pos_fl_y_type;
  _goal_pos_fl_y_type goal_pos_fl_y;

   typedef float _goal_pos_fl_z_type;
  _goal_pos_fl_z_type goal_pos_fl_z;

   typedef uint8_t _wheel_rotation_enabled_fl_type;
  _wheel_rotation_enabled_fl_type wheel_rotation_enabled_fl;

   typedef float _goal_pos_bl_x_type;
  _goal_pos_bl_x_type goal_pos_bl_x;

   typedef float _goal_pos_bl_y_type;
  _goal_pos_bl_y_type goal_pos_bl_y;

   typedef float _goal_pos_bl_z_type;
  _goal_pos_bl_z_type goal_pos_bl_z;

   typedef uint8_t _wheel_rotation_enabled_bl_type;
  _wheel_rotation_enabled_bl_type wheel_rotation_enabled_bl;

   typedef float _goal_pos_br_x_type;
  _goal_pos_br_x_type goal_pos_br_x;

   typedef float _goal_pos_br_y_type;
  _goal_pos_br_y_type goal_pos_br_y;

   typedef float _goal_pos_br_z_type;
  _goal_pos_br_z_type goal_pos_br_z;

   typedef uint8_t _wheel_rotation_enabled_br_type;
  _wheel_rotation_enabled_br_type wheel_rotation_enabled_br;

   typedef float _goal_pos_fr_x_type;
  _goal_pos_fr_x_type goal_pos_fr_x;

   typedef float _goal_pos_fr_y_type;
  _goal_pos_fr_y_type goal_pos_fr_y;

   typedef float _goal_pos_fr_z_type;
  _goal_pos_fr_z_type goal_pos_fr_z;

   typedef uint8_t _wheel_rotation_enabled_fr_type;
  _wheel_rotation_enabled_fr_type wheel_rotation_enabled_fr;




  typedef boost::shared_ptr< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LegMovementGoal_

typedef ::centauro_locomotion_msgs::LegMovementGoal_<std::allocator<void> > LegMovementGoal;

typedef boost::shared_ptr< ::centauro_locomotion_msgs::LegMovementGoal > LegMovementGoalPtr;
typedef boost::shared_ptr< ::centauro_locomotion_msgs::LegMovementGoal const> LegMovementGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace centauro_locomotion_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'centauro_locomotion_msgs': ['/home/xi/workspace/terrain_classifier/preprocessor/src/centauro_locomotion_msgs/msg', '/home/xi/workspace/terrain_classifier/preprocessor/devel/share/centauro_locomotion_msgs/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ca7b1bbc5861ddc981466bbe2d8e8d0";
  }

  static const char* value(const ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ca7b1bbc5861ddcULL;
  static const uint64_t static_value2 = 0x981466bbe2d8e8d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "centauro_locomotion_msgs/LegMovementGoal";
  }

  static const char* value(const ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# ROS Action which defines endeffector positions for all four legs in cartesian space\n\
# relative to the robot base center. (fl = front left, br = back right ...). Each wheel is oriented forward and is perpendicular\n\
# to the ground. The bool flag \"wheel_rotation_enabled\" describes if the wheel is free to rotate or if wheel rotation is inhibited.\n\
# The result is an empty message but has to be sent to signalize that the desired configuration is reached.\n\
\n\
# Goal: longitudinal wheel coordinate\n\
float32 goal_pos_fl_x\n\
float32 goal_pos_fl_y\n\
float32 goal_pos_fl_z\n\
bool wheel_rotation_enabled_fl\n\
\n\
float32 goal_pos_bl_x\n\
float32 goal_pos_bl_y\n\
float32 goal_pos_bl_z\n\
bool wheel_rotation_enabled_bl\n\
\n\
float32 goal_pos_br_x\n\
float32 goal_pos_br_y\n\
float32 goal_pos_br_z\n\
bool wheel_rotation_enabled_br\n\
\n\
float32 goal_pos_fr_x\n\
float32 goal_pos_fr_y\n\
float32 goal_pos_fr_z\n\
bool wheel_rotation_enabled_fr\n\
\n\
";
  }

  static const char* value(const ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_pos_fl_x);
      stream.next(m.goal_pos_fl_y);
      stream.next(m.goal_pos_fl_z);
      stream.next(m.wheel_rotation_enabled_fl);
      stream.next(m.goal_pos_bl_x);
      stream.next(m.goal_pos_bl_y);
      stream.next(m.goal_pos_bl_z);
      stream.next(m.wheel_rotation_enabled_bl);
      stream.next(m.goal_pos_br_x);
      stream.next(m.goal_pos_br_y);
      stream.next(m.goal_pos_br_z);
      stream.next(m.wheel_rotation_enabled_br);
      stream.next(m.goal_pos_fr_x);
      stream.next(m.goal_pos_fr_y);
      stream.next(m.goal_pos_fr_z);
      stream.next(m.wheel_rotation_enabled_fr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LegMovementGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::centauro_locomotion_msgs::LegMovementGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal_pos_fl_x: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_fl_x);
    s << indent << "goal_pos_fl_y: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_fl_y);
    s << indent << "goal_pos_fl_z: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_fl_z);
    s << indent << "wheel_rotation_enabled_fl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_rotation_enabled_fl);
    s << indent << "goal_pos_bl_x: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_bl_x);
    s << indent << "goal_pos_bl_y: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_bl_y);
    s << indent << "goal_pos_bl_z: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_bl_z);
    s << indent << "wheel_rotation_enabled_bl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_rotation_enabled_bl);
    s << indent << "goal_pos_br_x: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_br_x);
    s << indent << "goal_pos_br_y: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_br_y);
    s << indent << "goal_pos_br_z: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_br_z);
    s << indent << "wheel_rotation_enabled_br: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_rotation_enabled_br);
    s << indent << "goal_pos_fr_x: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_fr_x);
    s << indent << "goal_pos_fr_y: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_fr_y);
    s << indent << "goal_pos_fr_z: ";
    Printer<float>::stream(s, indent + "  ", v.goal_pos_fr_z);
    s << indent << "wheel_rotation_enabled_fr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_rotation_enabled_fr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CENTAURO_LOCOMOTION_MSGS_MESSAGE_LEGMOVEMENTGOAL_H
